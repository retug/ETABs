<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MathNet.Numerics.Data.Text</name>
    </assembly>
    <members>
        <member name="T:MathNet.Numerics.Data.Text.DelimitedReader">
            <summary>
            Creates a <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/> from a delimited text file. If the user does not
            specify a delimiter, then any whitespace is used.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Data.Text.DelimitedReader.RegexTemplate">
            <summary>
            The base regular expression.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Data.Text.DelimitedReader.WhiteSpaceRegexTemplate">
            <summary>
            Regular expression to match whitespace.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Data.Text.DelimitedReader.RegexCache">
            <summary>
            Cached compiled regular expressions for various delimiters, as needed.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Data.Text.DelimitedReader.Read``1(System.IO.TextReader,System.Boolean,System.String,System.Boolean,System.IFormatProvider,System.Nullable{``0})">
            <summary>
            Reads a <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/> from the given <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> to read the matrix from.</param>
            <param name="sparse">Whether the returned matrix should be constructed as sparse (true) or dense (false). Default: false.</param>
            <param name="delimiter">Number delimiter between numbers of the same line. Supports Regex groups. Default: "\s" (white space).</param>
            <param name="hasHeaders">Whether the first row contains column headers or not. Default: false.</param>
            <param name="formatProvider">The culture to use. Default: null.</param>
            <param name="missingValue">The value to represent missing values. Default: NaN.</param>
            <returns>A matrix containing the data from the <see cref="T:System.IO.TextReader"/>.</returns>
            <typeparam name="T">The data type of the Matrix. It can be either: double, float, Complex, or Complex32.</typeparam>
        </member>
        <member name="M:MathNet.Numerics.Data.Text.DelimitedReader.Read``1(System.String,System.Boolean,System.String,System.Boolean,System.IFormatProvider,System.Nullable{``0})">
            <summary>
            Reads a <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/> from the given file.
            </summary>
            <param name="filePath">The path and name of the file to read the matrix from.</param>
            <param name="sparse">Whether the returned matrix should be constructed as sparse (true) or dense (false). Default: false.</param>
            <param name="delimiter">Number delimiter between numbers of the same line. Supports Regex groups. Default: "\s" (white space).</param>
            <param name="hasHeaders">Whether the first row contains column headers or not. Default: false.</param>
            <param name="formatProvider">The culture to use. Default: null.</param>
            <param name="missingValue">The value to represent missing values. Default: NaN.</param>
            <returns>A matrix containing the data from the <see cref="T:System.IO.TextReader"/>.</returns>
            <typeparam name="T">The data type of the Matrix. It can be either: double, float, Complex, or Complex32.</typeparam>
        </member>
        <member name="M:MathNet.Numerics.Data.Text.DelimitedReader.Read``1(System.IO.Stream,System.Boolean,System.String,System.Boolean,System.IFormatProvider,System.Nullable{``0})">
            <summary>
            Reads a <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/> from the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read the matrix from.</param>
            <param name="sparse">Whether the returned matrix should be constructed as sparse (true) or dense (false). Default: false.</param>
            <param name="delimiter">Number delimiter between numbers of the same line. Supports Regex groups. Default: "\s" (white space).</param>
            <param name="hasHeaders">Whether the first row contains column headers or not. Default: false.</param>
            <param name="formatProvider">The culture to use. Default: null.</param>
            <param name="missingValue">The value to represent missing values. Default: NaN.</param>
            <returns>A matrix containing the data from the <see cref="T:System.IO.TextReader"/>.</returns>
            <typeparam name="T">The data type of the Matrix. It can be either: double, float, Complex, or Complex32.</typeparam>
        </member>
        <member name="M:MathNet.Numerics.Data.Text.DelimitedReader.NaN``1">
            <summary>
            NaN for the given numeric type.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Data.Text.DelimitedReader.Zero``1">
            <summary>
            Zero for the given numeric type.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Data.Text.DelimitedReader.CountDelimiters(System.String,System.String)">
            <summary>
            Counts the number of delimiters in a row.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Data.Text.DelimitedReader.CleanDelimiter(System.String)">
            <summary>
            Returns a regex friendly delimiter.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Data.Text.DelimitedReader.StripOffQuotes(System.String)">
            <summary>
            strip off quotes (TODO: can we replace this with trimming?)
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Data.Text.DelimitedWriter">
            <summary>
            Writes an <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/> to delimited text file. If the user does not
            specify a delimiter, a tab separator is used.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Data.Text.DelimitedWriter.Write``1(System.IO.TextWriter,MathNet.Numerics.LinearAlgebra.Matrix{``0},System.String,System.Collections.Generic.IList{System.String},System.String,System.IFormatProvider,System.Nullable{``0})">
            <summary>
            Writes a matrix to the given TextWriter. Optionally accepts custom column headers, delimiter, number format and culture.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to write the matrix to.</param>
            <param name="matrix">The matrix to write.</param>
            <param name="delimiter">Number delimiter to write between numbers of the same line. Default:  "\t" (tabulator).</param>
            <param name="columnHeaders">Custom column header. Headers are only written if non-null and non-empty headers are provided. Default: null.</param>
            <param name="format">The number format to use on each element. Default: null.</param>
            <param name="formatProvider">The culture to use. Default: null.</param>
            <param name="missingValue">A value that represents a missing value. If not null, then elements of the matrix that have this value
            are not written to the output file.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="matrix"/> or <paramref name="writer"/> is <c>null</c>.</exception>
            <typeparam name="T">The data type of the Matrix. It can be either: Double, Single, Complex, or Complex32.</typeparam>
        </member>
        <member name="M:MathNet.Numerics.Data.Text.DelimitedWriter.Write``1(System.String,MathNet.Numerics.LinearAlgebra.Matrix{``0},System.String,System.Collections.Generic.IList{System.String},System.String,System.IFormatProvider,System.Nullable{``0})">
            <summary>
            Writes a matrix to the given file. Optionally accepts custom column headers, delimiter, number format and culture.
            </summary>
            <param name="filePath">The path and name of the file to write the matrix to. If the file already exists, the file will be overwritten.</param>
            <param name="matrix">The matrix to write.</param>
            <param name="delimiter">Number delimiter to write between numbers of the same line. Default:  "\t" (tabulator).</param>
            <param name="columnHeaders">Custom column header. Headers are only written if non-null and non-empty headers are provided. Default: null.</param>
            <param name="format">The number format to use on each element. Default: null.</param>
            <param name="formatProvider">The culture to use. Default: null.</param>
            <param name="missingValue">A value that represents a missing value. If not null, then elements of the matrix that have this value
            are not written to the output file.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="matrix"/> or <paramref name="filePath"/> is <c>null</c>.</exception>
            <typeparam name="T">The data type of the Matrix. It can be either: Double, Single, Complex, or Complex32.</typeparam>
        </member>
        <member name="M:MathNet.Numerics.Data.Text.DelimitedWriter.Write``1(System.IO.Stream,MathNet.Numerics.LinearAlgebra.Matrix{``0},System.String,System.Collections.Generic.IList{System.String},System.String,System.IFormatProvider,System.Nullable{``0})">
            <summary>
            Writes a matrix to the given stream. Optionally accepts custom column headers, delimiter, number format and culture.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to write the matrix to.</param>
            <param name="matrix">The matrix to write.</param>
            <param name="delimiter">Number delimiter to write between numbers of the same line. Default: "\t" (tabulator).</param>
            <param name="columnHeaders">Custom column header. Headers are only written if non-null and non-empty headers are provided. Default: null.</param>
            <param name="format">The number format to use on each element. Default: null.</param>
            <param name="formatProvider">The culture to use. Default: null.</param>
            <param name="missingValue">A value that represents a missing value. If not null, then elements of the matrix that have this value
            are not written to the output file.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="matrix"/> or <paramref name="stream"/> is <c>null</c>.</exception>
            <typeparam name="T">The data type of the Matrix. It can be either: Double, Single, Complex, or Complex32.</typeparam>
        </member>
        <member name="T:MathNet.Numerics.Data.Text.MatrixMarketReader">
            <summary>
            NIST MatrixMarket Format Reader (http://math.nist.gov/MatrixMarket/)
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Data.Text.MatrixMarketWriter">
            <summary>
            NIST MatrixMarket Format Writer (http://math.nist.gov/MatrixMarket/)
            </summary>
        </member>
    </members>
</doc>
